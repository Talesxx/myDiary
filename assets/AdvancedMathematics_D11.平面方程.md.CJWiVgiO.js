import{_ as a,c as d,o as e,ag as r}from"./chunks/framework.DUk-6-fP.js";const m=JSON.parse('{"title":"平面方程求法","description":"","frontmatter":{},"headers":[],"relativePath":"AdvancedMathematics/D11.平面方程.md","filePath":"AdvancedMathematics/D11.平面方程.md"}'),c={name:"AdvancedMathematics/D11.平面方程.md"};function o(s,t,h,n,i,_){return e(),d("div",null,[...t[0]||(t[0]=[r('<h1 id="平面方程求法" tabindex="-1">平面方程求法 <a class="header-anchor" href="#平面方程求法" aria-label="Permalink to “平面方程求法”">​</a></h1><p>三维空间中所有处于同一平面的点所对应的方程，任何一个平面都可以用三元一次方程来表示。</p><h3 id="平面方程表达式" tabindex="-1">平面方程表达式 <a class="header-anchor" href="#平面方程表达式" aria-label="Permalink to “平面方程表达式”">​</a></h3><table tabindex="0"><thead><tr><th></th><th>表达式</th><th>限定条件</th><th>特殊含义</th></tr></thead><tbody><tr><td>一般式</td><td>Ax+By+Cz+D=0</td><td>A,B,C,D为已知常数，并且A,B,C不同时为零。</td><td>D=0时，该平面过原点，(A,B,C)是该平面的法向量。</td></tr><tr><td>点法式</td><td>A(x-x0)+B(y-y0)+C(z-z0)=0</td><td>A,B,C,D为已知常数，并且A,B,C不同时为零。</td><td>(A,B,C)是该平面的法向量，(x0,y0,z0)是该平面上的点。</td></tr><tr><td>截距式</td><td>x/a+y/b+z/c=1</td><td>若该平面在一个轴上没有截距，则这个平面平行于该轴，表达式为两元一次方程；若该平面在两个轴上没有截距，则这个平面平行于这两个轴，表达式为一元一次方程。</td><td>该平面过(a,0,0),(0,b,0),(0,0,c)，a,b,c依次称为该平面在x,y,z轴上的截距。</td></tr><tr><td>法线式</td><td>xcosα+ycosβ+zcosγ=p</td><td></td><td>p为原点到平面的距离，cosα、cosβ、cosγ是平面法向量的方向余弦。。</td></tr></tbody></table><h3 id="在三位空间中" tabindex="-1">在三位空间中 <a class="header-anchor" href="#在三位空间中" aria-label="Permalink to “在三位空间中”">​</a></h3>',5)])])}const p=a(c,[["render",o]]);export{m as __pageData,p as default};
